{"version":3,"sources":["queries.tsx","database.tsx","components/controller/controller.tsx","components/search-bar/search-bar.tsx","components/result-list/result-list.tsx","components/nomination-list/nomination-list.tsx","components/banner/banner.tsx","index.tsx"],"names":["GET_TITLE","gql","process","SEARCH_TITLE","saveNominationList","nominationsList","req","indexedDB","open","onsuccess","store","result","transaction","objectStore","clear","forEach","nomination","add","Controller","useState","title","setTitle","nominationList","setNominationList","useLazyQuery","searchTitle","loading","searchData","data","client","useApolloClient","useEffect","queryString","window","location","search","urlParams","URLSearchParams","has","newNominationList","IDs","get","split","ID","imdbID","callback","onupgradeneeded","db","objectStoreNames","contains","createObjectStore","keyPath","onerror","findNominationById","response","push","length","baseurl","protocol","host","pathname","history","replaceState","document","query","variables","id","then","getAll","loadNominationList","className","Banner","SearchBar","ResultList","NominationList","searchFor","useCallback","debounce","trim","htmlFor","src","alt","aria-hidden","type","onKeyUp","e","currentTarget","value","titles","role","undefined","Search","map","key","Title","Year","onClick","newNominated","find","addNomination","disabled","nominated","shareBtnText","setShareBtnText","filter","removeNomination","join","navigator","clipboard","writeText","onMouseLeave","App","restLink","RestLink","uri","ApolloClient","cache","InMemoryCache","link","style","marginTop","marginBottom","render","getElementById"],"mappings":"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","file":"static/js/main.a3415f39.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_TITLE = gql`\r\n  query GET_TITLE {\r\n    title(t: $title, i: $id) @rest(path: \"/?apikey=${process.env.REACT_APP_OMBD_KEY}&type=movie&{args}\") {\r\n      Title\r\n      Year\r\n      imdbID\r\n      Type\r\n      Poster\r\n    }\r\n  }\r\n`\r\n\r\nexport const SEARCH_TITLE = gql`\r\n  query SEARCH {\r\n    result(s: $search) @rest(path: \"/?apikey=${process.env.REACT_APP_OMBD_KEY}&type=movie&{args}\") {\r\n      Search {\r\n        Title\r\n        Year\r\n        imdbID\r\n        Type\r\n        Poster\r\n      }\r\n    }\r\n  }\r\n`","import { Title } from './interfaces';\r\n\r\nexport const saveNominationList = (nominationsList: Title[]) => {\r\n  const req = indexedDB.open('Shoppies');\r\n\r\n  req.onsuccess = () => {\r\n    const db = req.result;\r\n    const tx = db.transaction('nominations', 'readwrite');\r\n    const store = tx.objectStore('nominations');\r\n    store.clear();\r\n\r\n    nominationsList.forEach((nomination) => {\r\n      store.add(nomination);\r\n    });\r\n  }\r\n}\r\n\r\nexport const loadNominationList = (callback: Function) => {\r\n  const req = indexedDB.open('Shoppies', 1);\r\n\r\n  req.onupgradeneeded = () => {\r\n    const db = req.result;\r\n    if (!db.objectStoreNames.contains('nominations')) {\r\n      db.createObjectStore('nominations', { keyPath: 'imdbID' });\r\n    }\r\n  }\r\n\r\n  req.onsuccess = () => {\r\n    const db = req.result;\r\n    const tx = db.transaction('nominations', 'readonly');\r\n    const store = tx.objectStore('nominations');\r\n    const data = store.getAll();\r\n\r\n    data.onsuccess = () => {\r\n      const nominationList = data.result as Title[];\r\n      callback(nominationList);\r\n    }\r\n  }\r\n}\r\n\r\nexport const findNominationById = (imdbID: string, callback: Function) => {\r\n  const req = indexedDB.open('Shoppies', 1);\r\n\r\n  req.onupgradeneeded = () => {\r\n    const db = req.result;\r\n    if (!db.objectStoreNames.contains('nominations')) {\r\n      db.createObjectStore('nominations', { keyPath: 'imdbID' });\r\n    }\r\n  }\r\n\r\n  req.onsuccess = () => {\r\n    const db = req.result;\r\n    const tx = db.transaction('nominations', 'readonly');\r\n    const store = tx.objectStore('nominations');\r\n    const data = store.get(imdbID);\r\n\r\n    data.onsuccess = () => {\r\n      const nomination = data.result as Title;\r\n      callback(nomination);\r\n    }\r\n\r\n    data.onerror = () => {\r\n      callback(null);\r\n    }\r\n  }\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport { SearchBar, ResultList, NominationList, Banner } from \"../\";\r\nimport { useLazyQuery, useApolloClient } from \"@apollo/client\";\r\nimport { SEARCH_TITLE, GET_TITLE } from \"../../queries\";\r\nimport { Title } from \"../../interfaces\";\r\nimport { loadNominationList, saveNominationList, findNominationById } from \"../../database\"\r\n\r\nexport default function Controller() {\r\n  const [title, setTitle] = useState(\"...\");\r\n  const [nominationList, setNominationList] = useState<Title[]>([])\r\n  const [searchTitle, { loading, data: searchData }] = useLazyQuery(SEARCH_TITLE);\r\n  const client = useApolloClient();\r\n\r\n\r\n  useEffect(() => {\r\n    const queryString = window.location.search;\r\n    const urlParams = new URLSearchParams(queryString);\r\n    if (urlParams.has(\"nominations\")) {\r\n      let newNominationList: Title[] = [];\r\n      const param = urlParams.get(\"nominations\") as string;\r\n      const IDs = param.split(\",\");\r\n\r\n      /* This is callback hell. Coudln't find a way to make IndexedDB look good */\r\n      IDs.forEach((ID) => {\r\n        findNominationById(ID, (response: Title | null) => {\r\n          if (response) {     /* Try to find it in indexedDB first */\r\n            newNominationList.push(response);\r\n\r\n            if (newNominationList.length === IDs.length) {\r\n              saveNominationList(newNominationList);\r\n              setNominationList(newNominationList);\r\n              const baseurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\r\n              window.history.replaceState({}, document.title, baseurl);\r\n            }\r\n          } else {    /* Else, fetch it */\r\n            client.query({ query: GET_TITLE, variables: { id: ID } }).then(response => {\r\n              const title = response.data.title as Title;\r\n              newNominationList.push(title);\r\n\r\n              if (newNominationList.length === IDs.length) {\r\n                saveNominationList(newNominationList);\r\n                setNominationList(newNominationList);\r\n                const baseurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\r\n                window.history.replaceState({}, document.title, baseurl);\r\n              }\r\n            });\r\n          }\r\n        });\r\n      });\r\n    } else {    /* If no url parameters, read from IndexedDB */\r\n      loadNominationList((nominationList: Title[]) => setNominationList(nominationList));\r\n    }\r\n  }, [client])\r\n\r\n  return (\r\n    <div className=\"controller\">\r\n      <Banner nominationList={nominationList} />\r\n      <SearchBar setTitle={setTitle} searchTitle={searchTitle} />\r\n      <ResultList title={title} searchData={searchData} loading={loading} nominationList={nominationList} setNominationList={setNominationList} />\r\n      <NominationList nominationList={nominationList} setNominationList={setNominationList} />\r\n    </div>\r\n  )\r\n}","import React, { useCallback } from \"react\";\r\nimport { debounce } from \"lodash\";\r\n\r\nexport default function SearchBar({ setTitle, searchTitle }: { setTitle: Function, searchTitle: Function }) {\r\n\r\n  const searchFor = useCallback(debounce((title: string) => {\r\n    title = title.trim();\r\n    if (title.length < 1) return;\r\n    searchTitle({ variables: { search: title } })\r\n    setTitle(title);\r\n  }, 300), []);\r\n\r\n  return (\r\n    <div className=\"card mb-4\">\r\n      <div className=\"card-body\">\r\n        <label className=\"font-weight-bold\" htmlFor=\"SearchBar\">Movie Title</label>\r\n        <div className=\"input-group\">\r\n          <div className=\"input-group-prepend\">\r\n            <img className=\"input-group-text\" src=\"search.svg\" alt=\"Seach Icon\" aria-hidden />\r\n          </div>\r\n          <input type=\"text\" className=\"form-control\" id=\"SearchBar\" onKeyUp={(e) => searchFor(e.currentTarget.value)} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\"\r\nimport { SearchData, Title } from \"../../interfaces\";\r\nimport { saveNominationList } from \"../../database\"\r\n\r\n\r\nexport default function ResultList({ title, searchData, loading, nominationList, setNominationList }: { title: string, searchData: SearchData | undefined, loading: boolean, nominationList: Title[], setNominationList: Function }) {\r\n  let titles: Title[];\r\n\r\n  const addNomination = (imdbID: string) => {\r\n    const newNominated = titles.find((title) => title.imdbID === imdbID);\r\n    const newNominationList = [...nominationList, newNominated] as Title[];\r\n    setNominationList(newNominationList);\r\n    saveNominationList(newNominationList);\r\n  }\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n          <p className=\"font-weight-bold\">Results for \"{title}\"</p>\r\n          <div className=\"text-center mt-4 mb-4\">\r\n            <div className=\"spinner-border\" role=\"status\">\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (searchData === undefined) {\r\n    return <></>\r\n  }\r\n\r\n  if (searchData.result.Search === null) {\r\n    return (\r\n      <div className=\"card mb-4\">\r\n        <div className=\"card-body\">\r\n          <p className=\"font-weight-bold\">Results for \"{title}\"</p>\r\n          <p>Sorry, the search didn't find anything.</p>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  titles = searchData.result.Search;\r\n  return (\r\n    <div className=\"card mb-4\">\r\n      <div className=\"card-body\">\r\n        <p className=\"font-weight-bold\">Results for \"{title}\"</p>\r\n        <ul>\r\n          {titles.map((title: Title) =>\r\n            <li key={title.imdbID} className=\"mb-1\">\r\n              {title.Title} ({title.Year})\r\n                  <button\r\n                type=\"button\"\r\n                className=\"btn btn-light ml-2\"\r\n                onClick={() => addNomination(title.imdbID)}\r\n                disabled={nominationList.find((nominated) => nominated.imdbID === title.imdbID) !== undefined\r\n                  || nominationList.length >= 5}>\r\n                Nominate\r\n                  </button>\r\n            </li>\r\n          )}\r\n        </ul>\r\n      </div>\r\n    </div >\r\n  )\r\n}","import React, { useState } from \"react\"\r\nimport { Title } from \"../../interfaces\"\r\nimport { saveNominationList } from \"../../database\"\r\n\r\nexport default function NominationList({ nominationList, setNominationList }: { nominationList: Title[], setNominationList: Function }) {\r\n\r\n  const [shareBtnText, setShareBtnText] = useState(\"Get shareable link\");\r\n\r\n  const removeNomination = (imdbID: string) => {\r\n    const newNominationList = nominationList.filter((nomination: Title) => nomination.imdbID !== imdbID);\r\n    setNominationList(newNominationList);\r\n    saveNominationList(newNominationList);\r\n  }\r\n\r\n  const getSharableLink = () => {\r\n    const IDs = nominationList.map(nomination => nomination.imdbID);\r\n    const baseurl = window.location.protocol + '//' + window.location.host + window.location.pathname;\r\n    const query = `?nominations=${IDs.join(',')}`;\r\n    navigator.clipboard.writeText(`${baseurl}${query}`);\r\n    setShareBtnText(\"Link saved to clipboard!\");\r\n  }\r\n\r\n  if (nominationList.length < 1) return <></>;\r\n\r\n  return (\r\n    <div className=\"card\">\r\n      <div className=\"card-body\">\r\n        <p className=\"font-weight-bold\">Nominations</p>\r\n        <ul>\r\n          {nominationList.map((title: Title) =>\r\n            <li key={title.imdbID} className=\"mb-1\">\r\n              {title.Title} ({title.Year})\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-light ml-2\"\r\n                onClick={() => removeNomination(title.imdbID)}>Remove</button>\r\n            </li>\r\n          )}\r\n        </ul>\r\n        <button\r\n          className=\"btn btn-outline-primary\"\r\n          onClick={getSharableLink}\r\n          onMouseLeave={() => setShareBtnText(\"Get shareable link\")}>{shareBtnText}</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport { Title } from \"../../interfaces\";\r\n\r\nexport default function Banner({ nominationList }: { nominationList: Title[] }) {\r\n  if (nominationList.length < 5) return <></>\r\n\r\n  return (\r\n    <div className=\"alert alert-primary\" role=\"alert\">\r\n      You've nominated {nominationList.length} movies!\r\n    </div>\r\n  )\r\n}","import React from 'react';\r\nimport { render } from 'react-dom';\r\n\r\nimport { ApolloClient, ApolloProvider, InMemoryCache } from '@apollo/client';\r\nimport { RestLink } from 'apollo-link-rest';\r\n\r\nimport { Controller } from './components';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './styles.scss';\r\n\r\n\r\nfunction App() {\r\n  const restLink = new RestLink({ uri: \"https://omdbapi.com\" });\r\n\r\n  const client = new ApolloClient({\r\n    cache: new InMemoryCache(),\r\n    link: restLink\r\n  });\r\n\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <div className=\"container\" style={{ marginTop: \"60px\", marginBottom: \"60px\" }}>\r\n        <h1>The Shoppies</h1>\r\n        <Controller />\r\n      </div>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nrender(<App />, document.getElementById('root'));"],"sourceRoot":""}